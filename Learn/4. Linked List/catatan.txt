A) Pengertian Linked List
    : Kita menggunakan linked list untuk menyimpan data dengan berurutan. berbeda dari array
    linked list dapat tumbuh dan mengecil dengan sendirinya.

B) Struktur Linked List
    : Terdiri dari sejumlah node. Node berisikan value dan alamat untuk node selanjutnya. Node pertama disebut
    dengan Head dan Node terakhir disebut tail
        
    [{value}, {alamat node selanjutnya}] --> [{value}, {alamat node selanjutnya}] --> [{value}, {alamat node selanjutnya}]

C) Rumus Kompleksitas Linked List
     C.1) Mencari nilai
        C.1.1) Mencari Nilai dengan value
            : Bila mencari nilai dengan value kita harus menelusuri linked list dari awal sampai akhir.
            maka rumus komplesitasnya ialah O(n).

        C.1.2) Mencari nilai dengan index        
            : Tidak seperti array yang memiliki index. Linked list harus menyelusuri dari head sampai tail.
            maka rumus kompleksitasnya ialah O(n).

    C.2) Memasukan nilai
        C.2.1) Memasukan nilai pada akhir
            : Membuat node baru. dan membuat node tail sekarang. Mereferensikan node baru. Maka rumus
            kompleksitasnya ialah O(1)
        
        C.2.2) Memasukan nilai baru pada awal
            : Membuat node baru. dan node baru tersebut mereferensikan head sekarang. dan merubah Head menjadi
            node baru. Maka rumus kompleksitasnya ialah O(1)
        
        C.2.3) Memasukan nilai baru pada tengah
            : Mencari node yang ingin diubah referensenya. Merubah referensi node tersebut ke node baru. 
            Rumus kompleksitasnya ialah O(n + 1) atau O(n).

    C.3) Menghapus Nilai
        C.3.1) Menghapus nilai pada awal
            : Merubah referensi Head kepada alamatnya. Dan menghapus node Head sebelumnya. Maka rumusnya ialah O(1).

        C.3.2) Menghapus nilai pada akhir
            : Mencari node yang mereferensikan pada tail. mengubahnya menjadi tail baru. dan menghapus tail.
            Rumus kompleksitasnya ialah O(n + 1) atau O(n).

        C.3.3) Menghapus nilai pada tengah
            : Mencari node yang ingin dihapus dan node sebelumnya. memasangkan node sebelumnya ke alamat dari node yang ingin dihapus.
            Dan menghapus node yang ingin dihapus. Rumus kompleksitasnya ialah O(n + 1) atau O(n).

D) Linked List pada Java
    D.1) Syntax dengan Type Data
        : LinkedList <{type data}> {nama linked list} = new LinkedList <{type data}>();
        cth : LinkedList <Integer> list = new LinkedList <Integer>();

    D.2) Syntax tanpa Type Data
        : LinkedList {nama linked list} = new LinkedList();
        cth : LinkedList list = new LinkedList();

    D.3) Menambahkan data pada akhir
        : addLast(data)
    
    D.4) Menambahkan data pada awal
        : addFirst(data)
    
    D.5) Menghapus data pada pertama
        : removeFirst()
    
    D.6) Menghapus data pada akhir
        : removeLast()

    D.7) Melihat apakah ada data
        : contains({data})

    D.8) Mendapatkan index dari sebuah data
        : indexOf({data})

    D.9) Mendapatkan ukuran dari linked list
        : size()

    D.10) Mengkonversi linked list menjadi array
        : .toArray();

E) Array Vs Linked List
    E.1) Space
    : 1) Static array memiliki ukuran yang fixed
      2) Dynamic array bila bertambah ukurannya dapat bertambah sebanya 50% sampai 100%
      ini menyebabkan banyak memori yang tersisa
      3) Linked list tidak menyisakan memori
      4) Gunakan array bila kamu tahu berapa banyak item yang akan dimasukan

    E.2) Rumus Kompleksitas berdasarkan metode
        E.2.1) Pencarian dengan index
            E.2.1.1) Arrays
            : O(1)

            E.2.1.2) Linked List
            : O(n) 
        
        E.2.2) Pencarian dengan value
            E.2.2.1) Arrays
            : O(n)
            
            E.2.2.2) Linked List
            : O(n)
        
        E.2.3) Menambahkan data di depan
            E.2.3.1) Arrays
            : O(n)

            E.2.4.1) Linked List
            : O(1)

        E.2.4) Menambahkan data di belakang
            E.2.4.1) Arrays
            : O(n)

            E.2.4.1) Linked List
            : O(1)
        
        E.2.5) Menambahkan array di tengah
            E.2.5.1) Arrays
            : O(n)

            E.2.5.2) Linked List
            : O(n)

        E.2.6) Menghapus data di depan
            E.2.3.1) Arrays
            : O(n)

            E.2.4.1) Linked List
            : O(1)

        E.2.7) Menghapus data di belakang
            E.2.4.1) Arrays
            : O(n)

            E.2.4.1) Linked List
            : O(n)
        
        E.2.5) Menambahkan array di tengah
            E.2.5.1) Arrays
            : O(n)

            E.2.5.2) Linked List
            : O(n)
        

F) Type dari Linekd List
    F.1) Doubly Linked List
    : Bila linked list memiliki property nextNode untuk merujuk kepada node selanjutnya. Doubly
    Linked List memiliki property previousNode untuk merujuk kepada node sebelumnya.

        F.1.1) Rumus Kompleksitas Menghapus node di akhir
        : Karena doubly linked list memiliki property previousNode. Maka untuk menghapus node terakhir
        1) previousNode dari node terakhir diubah menjadi tail
        2) nextNode dari tail diassign ke null
        Dengan rumus kompleksitas O(1)

    F.2) Circular Linked List
    : Property dari nextNode pada tail circularLinkedList merujuk pada head.
