A) What is Big O
    : Notasi matematika yang mendeskripsikan performa 
    pada algoritma. Dan ini membantu kita untuk menentukan
    apakah algoritma scallable atau tidak. 

B) O(1)
    B.1) Contoh
    : const callFirstNumber = (arr) =>{
         console.log(arr[0]);
        }
    B.2) Penjelasan
    : Tidak penting seberapa banyak array yang
    dimasukan logika hanya dijalankan sekali.

    B.3) Contoh 2
    : const callFirstNumber = (arr) =>{
        console.log(arr[0]);
        console.log(arr[0]);
    }

    B.1.4) Penjelasan
    : Algoritma diatas memiliki rumus kompleksitas O(2).
    Ketika membicaran rumus kompleksitas hiraukan jumlah
    operasinya. Kita hanya ingin tahu seberapa lamakah
    algoritma kita ketika inputnya membesar. Pada contoh 2
    tidak peduli apakah kita memiliki input 1 atau 1 miliar.
    method kita berjalan dengan waktu yang constant. Maka kita 
    bisa menyederhanakan ini dengan menuliskan O(1).

C) O(n)
    C.1) Contoh 1
    : const calllAllNumbers = (numbers) =>{
        for(let i =0; i< numbers.length; i++){
            console.log(numbers[i]);
        }
    }

    C.2) Penjelasan
    : Pada contoh diatas logika akan dijalan sebanyak jumlah inputnya. Jika
    inputnya ada 1 juta. maka logika akan dijalankan 1 juta kali. Jadi kompleksitas
    algoritma ini berbanding lurus dengan banyaknya input. O(n) dimana n merepresentasikan banyaknya
    input.

    C.3) Contoh 2
    : const calllAllNumbers = (numbers) =>{
        console.log('===Call All Numbers===');
           for(let i =0; i< numbers.length; i++){
            console.log(numbers[i]);
        }
        console.log('====End====');
    }

    C.4) Penjelasan
    : Pada algoritma diatas ditambahkan dua pada sebelum dan sesudah perulangan. Maka
    rumus kompleksitasnya ialah O(1+n+1) ataun O(n+2). Tetapi ketika membuat rumus kompleksitas,
    kita harus menghapus semua constant dikarenakan constant tidak menambahkan perubahan signifikan
    pada kompleksitas algoritmanya. Jadi rumusnya dapat disederhanakan menjadi O(n).

    C.5) Contoh 3
    : const calllAllNumbers = (numbers) =>{
        for(let i =0; i< numbers.length; i++){
            console.log(numbers[i]);
        }
        for(let i =0; i< numbers.length; i++){
            console.log(numbers[i]);
        }
    }

    C.6) Penjelasan 3
    : Rumus diatas menjalankan dua kali perulangan logika. Maka rumusnya ialah O(2 * n). Kita dapat
    menghapus constant pada rumusnya menjadi O(n)

    C.7) Contoh 4
    :  const calllAllNumbersAndStrings = (numbers, strings) =>{
        for(let i =0; i< numbers.length; i++){
            console.log(numbers[i]);
        }
        for(let i =0; i< strings.length; i++){
            console.log(strings[i]);
        }
    }

    C.8) Penjelasan
    : Pada algoritma diatas terdapat dua input yaitu numbers dan string. Masing-masing input diulang sebanyak
    panjangnya input. Maka rumusnya ialah O(n+m), dengan n = input numbers dan m ialah input strings.

D) O(n ^ 2)
    : Disebut pula quadratic formula. Runtime complexity akan sangat besar bila inputnya besar pula.

    D.1) Contoh 1
    :  for(let i =0; i< strings.length; i++){
            for(let j=0; j< strings.length; j++){
                      console.log(strings[j]);
            }
        }
    
    D.2) Penjelasan
    : Pada contoh diatas syntax logic dijalankan sebanyak banyaknya jumlah input dikali dengan banyaknya
    jumlahnya input. O(n * n) atau O(n^2)

    D.3) Contoh 2
    :   for(let i =0; i< strings.length; i++){
            console.log(strings[i]);
        }
    
        for(let i =0; i< strings.length; i++){
            for(let j=0; j< strings.length; j++){
                      console.log(strings[j]);
            }
       }
    
    D.4) Penjelasan
    : Pada contoh diatas syntax logic dijalankan sekali O(n). ditambah dengan O(n*n). maka rumus kompleksitasnya
    ialah O(n + n^2). Dapat juga disederhanakan menjadi O(n^2) karena constant n tidak sesignifikan n^2.

    D.5) Contoh 3
    :  for(let i =0; i< strings.length; i++){
            for(let j=0; j< strings.length; j++){
                for(let k=0; k< strings.length; k++){
                    console.log(strings[k]);
                }
            }
       }
    
    D.6) Penjelasan
    : Pada contoh diatas syntax logic dijalankan sebanyak O(n) dikali dengan O(n) dikali dengan  O(n). maka rumusnya
    ialah O(n^3)


        


        