A) Apa itu Hash Tables
    : Hash Tables ialah data structure dengan format key object. 
    Memiliki kemampuan pencarian yang cepat.

B) Kegunaan Hash Tables
    1) Spell checkers
    2) Dictionaries
    3) Compilers
    4) Code Editors

C) Structure Hash Tables
    : {
        key: value
    }

D) Operasi Hash Table
    1) Insert O(1)
    2) Lookup O(1)
    3) Delete O(1)

E) Penggunaan hash map pada Java
    : Harus dengan adanya interface Map. Class yang biasanya
    digunakan ialah class HashMap

    E.1) Deklarasi
    : Map<{tipe data key}, {tipe data value}> {nama variabel} 
     = new HashMap<>();
     contoh : Map<Integer, String> map = new HashMap<>();

    E.2) Memasukan nilai 
    : {nama variabel map}.put({key}, {value})
    contoh : map.put(3, "Adit")

    E.3) Mengambil nilai
    : {nama variabel map}.get({key})
    contoh : map.get(3);

    E.4) Mencari apakah nilai ada berdasarkan key
    : {nama variabel map}.containsKey({key});
    contoh : map.containsKey(3);

    E.5) Mencari apakah key ada berdasarkan nilai
    : {nama variabel map}.containsVal

    E.6) Melakukan perulangan pada HashMap
        E.6.1) keySet()
        : dengan menggunakan keySet kita mendapatkan semua value
        dari map
        contoh : 
          for (var item : map.keySet()) {
            System.out.println(map.get(item));
        }

        E.6.1) entrySet()
        : dengan menggunakan keySet kita mendapatkan key value
        dari map
        contoh : 
          for (var item : map.keySet()) {
            System.out.println(item.getValue);
        }

F) Sets
    : Set ialah data structure yang hanya memiliki key. tidak diizinkannya ada key yang terdupliaksi

    F.1) Penggunaan Sets pada Java
    : Menggunakan interface Set
        F.1.1) Deklarasi
        : Set<{type data}> set = new HashSet<>();
        contoh : Set<Integer> set = new HashSet<>();

        F.1.2) Menambahkan data ke set
        : {nama variable set}.add({nilai})
        contoh : set.add(3);

        F.1.3) Menghapus data ke set
        : {nama variable set}.remove({key})
        contoh : set.remove(3);

        F.1.4) Mengcek apakah ada key 
        :  {nama variable set}.contains({key})
        contoh : set.contains(3);

        F.1.5) Mengcek ukuran dari set
        :  {nama variable set}.size()
        contoh : set.size();

G) Collision
    : Ketika mengenerate hash value. dapat pula mengenerate hash value yang sama. Hal ini disebut Collision
    
H) Chaining
    : Solusi dari collision dimana menggunakan Linked List untuk menyimpan banyak nilai dalam satu key
    H.1) Contoh
    : Misal kita memiliki hash table dengan ukuran 5. Dan mengisinya dengan 
    1) Key 6, Value A maka ia masuk ke slot 1 (6 % 5)
    2) Key 8, Value B maka ia masuk ke slot 3 (8 % 5)
    3) Key 11, Value C maka ia masuk ke slot 1 (11 % 5)

    0[]
    1[]->A -> C
    2[]
    3[]->B
    4[]

I) Open Addressing
    : Solusi dari collision dimana akan dicarikan slot baru yang kosong untuk diisi dengan value.

    I.1) Linear Probing
    : Bila terdapat colision maka akan dicarikan slot hashkey + i dari slot yang mengalami colision.
    1) Key 6, Value A maka ia masuk ke slot 1 (6 % 5)
    2) Key 8, Value B maka ia masuk ke slot 3 (8 % 5)
    3) Key 11, Value C maka ia masuk ke slot 2 karena slot 1 sudah penuh ((11 % 5) + 1) 

    0[]
    1[6,A]
    2[11, C]
    3[8, B]
    4[]

    I.2) Quadratic Probing
    : Bila terdapat colision maka akan dicarikan slot (hashkey + 1)^2 dari slot yang mengalami colision.
    1) Key 6, Value A maka ia masuk ke slot 1 (6 % 5)
    2) Key 8, Value B maka ia masuk ke slot 3 (8 % 5)
    3) Key 11, Value C maka ia masuk ke slot 4 karena slot 1 sudah penuh ((11 % 5) + 1)^2 

    0[]
    1[6,A]
    2[]
    3[8, B]
    4[11, C]

    I.3) Double Hashing
    : Bila terdapat colision maka akan dicarikan slot dengan rumus (hashkey + (i * hash2(key))). dan
     hash2key berumuskan = bilanganPrima - (key % bilanganPrima)
    1) Key 6, Value A maka ia masuk ke slot 1 (6 % 5)
    2) Key 8, Value B maka ia masuk ke slot 3 (8 % 5)
    3) Key 11
    hash1(11)  = 11 % 5 = 1
    hash2(11)  = 3- (11 % 3) = 1
    index = 1 + 1*1 = 2

    0[]
    1[6,A]
    2[11, C]
    3[8, B]
    4[]