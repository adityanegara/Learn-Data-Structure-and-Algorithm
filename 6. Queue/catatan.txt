A) Apa itu queue
    : Queue ialah data struktur sama seperti Stack yang menerapkan
    prinsip First in First Out (FIFO)

B) First in First Out (FIFO)
    : FIFO berarti data yang pertama masuk ialah data yang pertama
    keluar

C) Pengaplikasian Queue 
    1) Printers
    2) Operating Systems
    3) Web Servers
    4) Life Support Systems

D) Operasi pada Queue
    D.1) Enqueue
    : Menambahkan data pada bagian belakang dari queue. Runtime
    complexities O(1)

    D.2) dequeue
    : Mengembalikan dan menghapus data bagian depan dari queue. 
    Runtime complexities O(1)

    D.3) Peek
    : Mengembalikan tanpa menghapus data bagian depan dari queue.
    Runtime complexities O(1)

    D.4) isEmpty
    : Mengecek apakah queue itu kosong atau tidak.
    Runtime complexities O(1)

    D.5) isFull
    : Mengecek apakah queue full atau tidak.
    Runtime complexities O(1)

E) Implementasi Queue pada Java
    : Pada java queue ialah Interface. Interce berarti
    ialah class yang beriiskan function kosong yang harus diisi.

    E.1) Method pada interface Queue
        E.1.1) add(e)
            : Memasukan data pada queue. bila penuh maka
            akan menampilkan error
        
        E.1.2) offer(e)
            : Memasukan data pada queue. bial penuh maka tidak
            akan menampilkan error
        
        E.1.3) poll()
            : Mengambil nilai terdepan dari queue dan menghapusnya.
             bila kosong kembalian null

        E.1.4) remove()
            : Mengambil nilai terdepan dari queue dan menghapusnya.
            bila kosong akan mengembalikan Exception.

        E.1.5) peek()
            : Mengambil nilai terdepan dari queue. bila kosong
            kembalian null.

        E.1.6) element()
            : Mengembalikan nilai terdepan dari queue. bila kosong
            mengembalikan Exception

    E.2) Inisialisasi
    :  Queue<{tipe data}> {nama variable} = new {implementasi}<>();
    contoh :  Queue<Integer> queue = new ArrayDeque<>();

F) Priority Queues
    F.1) Definisi
    : Dalam priority queues object diproses berdasarkan prioritas
    bukan melalui ordernya.

    F.2) Analogy
    : Bayangkan anda memiliki tumpukan surat tapi anda tidak akan membukanya.
    Anda ingin mengurutkan surat tersebut berdasarkan prioritas. 
    Surat yang memiliki prioritas tinggi akan ditaru di atas dan yang rendah akan dibawah

    F.3) Priority Queue dalam Java
        F.3.1) Deklarasi
        : PriorityQueue<{type data}> queue = new PriorityQueue<>();
        cth : PriorityQueue<Integer> queue = new PriorityQueue<>();

        F.3.2) Memasukan data
        {nama queue}.add({data});
        cth : queue.add(1);

        F.3.3) Mengeluarkan data
        {nama queue}.remove();
        cth : queue.remove();

    F.4) Algoritma pembuatan Priority Queue
        F.4.1) Enqueue
        : Misal terdapat priority Queue beritem [1,3,5,7].
        Kita menjalankan enqueue(2). maka seharusnya queue menjadi [1,2,3,5,7].
        1) enqueue(2)
            [1,3,5,7, null]
             0 1 2 3
                   *                
            Mengecek apakah nilai 2 lebih besar daripada 7.
             Jika ya maka nilai 7 akan menggeser ke index 3
        
        2)  [1,3,5,7,7]
             0 1 2 3 4
                 *
            Mengecek apakah nilai 2 lebih besar daripada 5.
            Jika ya maka nilai 5 akan menggeser ke index 3\

        3) [1,3,5,5,7]
            0 1 2 3 4
              *
            Mengecek apakah nilai 2 lebih besar daripada 3.
            Jika ya maka nilai 3 digeser ke index 4.
        
        4) [1,3,3,5,7]
            0 1 2 3 4
            *
            Mengecek apakah nilai 2 lebih besar daripada 1.
            Jika ya maka ubah nilai [i+1] menjadi 2

        enqueue(2);
        [1,3,null]
        apakah nilai 2 lebih besar dari null?
        ya, 
        [1,3,null]
           * 
         apakah nilai 3 lebih besar dari 2.
         ya,

         [1,null,null]
          * 
            apakah 1 lebih besar daripada 2. maka i-1 = 2